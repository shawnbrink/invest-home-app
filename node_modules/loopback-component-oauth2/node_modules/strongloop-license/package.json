{
  "name": "strongloop-license",
  "version": "1.5.1",
  "description": "Validates StrongLoop licenses",
  "main": "index.js",
  "scripts": {
    "lint": "eslint . && jscs .",
    "pretest": "eslint . && jscs .",
    "test": "tap --coverage --coverage-report=cobertura test/test-*.js"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:strongloop/strongloop-license.git"
  },
  "keywords": [
    "strongloop",
    "license"
  ],
  "author": {
    "name": "StrongLoop",
    "email": "callback@strongloop.com"
  },
  "license": "SEE LICENSE IN LICENSE.md",
  "bugs": {
    "url": "https://github.com/strongloop/strongloop/issues"
  },
  "homepage": "https://strongloop.com",
  "devDependencies": {
    "concat-stream": "^1.4.7",
    "eslint": "^0.17.0",
    "jscs": "^1.11.3",
    "tap": "^1.2.0"
  },
  "dependencies": {
    "debug": "^2.2.0",
    "strong-license": "^1.2.0",
    "user-home": "^1.1.1"
  },
  "readme": "strongloop-license\n==================\n\nValidates StrongLoop licenses.\n\n## Usage\n\nThe simplest case is to declare a simple license requirement that takes the\ndefault action if the license check fails.\n\n### Examples\n\n#### String Form\n```js\nrequire('strongloop-license')('some-product:some-feature=Special Sauce');\n```\n\n#### Options Form\n```js\nrequire('strongloop-license')({\n  product: 'some-product',\n  feature: 'some-feature',\n  label: 'Special Sauce',\n});\n```\n\n#### Exit On Failure\n```js\nrequire('strongloop-license')('core:feature', 'EXIT');\n```\n\n### API\n\n#### module(opts, [callback])\n\n* `opts`: an object or a string\n  * string: a string of the format `product[:feature][=label]`\n  * object: an object with the following properties:\n    * `product`: product name\n    * `feature`: feature name\n    * `label`: friendly name for logs instead of product:feature\n    * `now`: time to compare license against (defaults to `Date.now()`\n    * `interval`: repeat license check ever `interval` ms (default to `0`, disabled)\n* `callback`: function or String\n  * function: `function(err, name, result)`\n    * `result` is `false` or the license details of the matching license\n  * string: name of builtin handler: `'NOOP'`, `'CONSOLE'`, `'EXIT'`\n\n#### module.CONSOLE\n\nDefault handler, prints a message to stderr if a license match is not found or\na message to stdout stating when the license is valid.\n",
  "readmeFilename": "README.md",
  "_id": "strongloop-license@1.5.1",
  "_from": "strongloop-license@^1.3.0"
}
