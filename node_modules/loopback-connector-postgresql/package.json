{
  "name": "loopback-connector-postgresql",
  "version": "2.3.0",
  "description": "Loopback PostgreSQL Connector",
  "keywords": [
    "StrongLoop",
    "LoopBack",
    "PostgreSQL",
    "DataSource",
    "Connector"
  ],
  "main": "index.js",
  "scripts": {
    "test": "mocha -R spec --timeout 10000 --require test/init.js test/*.test.js"
  },
  "dependencies": {
    "async": "^0.9.0",
    "pg": "^4.2.0",
    "debug": "^2.1.1",
    "loopback-connector": "^2.1.0",
    "sl-blip": "http://blip.strongloop.com/loopback-connector-postgresql@2.3.0"
  },
  "devDependencies": {
    "bluebird": "^2.9.12",
    "loopback-datasource-juggler": "^2.28.0",
    "mocha": "^2.1.0",
    "rc": "^1.0.0",
    "should": "^5.0.0",
    "sinon": "^1.15.4"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/strongloop/loopback-connector-postgresql.git"
  },
  "license": {
    "name": "Dual Artistic-2.0/StrongLoop",
    "url": "https://github.com/strongloop/loopback-connector-postgresql/blob/master/LICENSE"
  },
  "optionalDependencies": {
    "sl-blip": "http://blip.strongloop.com/loopback-connector-postgresql@2.3.0"
  },
  "readme": "## loopback-connector-postgresql\n\nThe PostgreSQL Connector module for for [loopback-datasource-juggler](http://docs.strongloop.com/loopback-datasource-juggler/).\n\nPlease see the [official documentation](http://docs.strongloop.com/display/LB/PostgreSQL+connector).\n\n\n## Connector settings\n\nThe connector can be configured using the following settings from the data source.\n* url: The URL to the database, such as 'postgres://test:mypassword@localhost:5432/dev'\n* host or hostname (default to 'localhost'): The host name or ip address of the PostgreSQL DB server\n* port (default to 5432): The port number of the PostgreSQL DB server\n* username or user: The user name to connect to the PostgreSQL DB\n* password: The password\n* database: The PostgreSQL database name\n* debug (default to false)\n\n**NOTE**: By default, the 'public' schema is used for all tables.\n\nThe PostgreSQL connector uses [node-postgres](https://github.com/brianc/node-postgres) as the driver. See more\ninformation about configuration parameters, check [https://github.com/brianc/node-postgres/wiki/Client#constructors](https://github.com/brianc/node-postgres/wiki/Client#constructors).\n\n## Discovering Models\n\nPostgreSQL data sources allow you to discover model definition information from existing postgresql databases. See the following APIs:\n\n - [dataSource.discoverModelDefinitions([username], fn)](https://github.com/strongloop/loopback#datasourcediscovermodeldefinitionsusername-fn)\n - [dataSource.discoverSchema([owner], name, fn)](https://github.com/strongloop/loopback#datasourcediscoverschemaowner-name-fn)\n\n\n## Model definition for PostgreSQL\n\nThe model definition consists of the following properties:\n\n* name: Name of the model, by default, it's the camel case of the table\n* options: Model level operations and mapping to PostgreSQL schema/table\n* properties: Property definitions, including mapping to PostgreSQL column\n\n```json\n\n    {\"name\": \"Inventory\", \"options\": {\n      \"idInjection\": false,\n      \"postgresql\": {\n        \"schema\": \"strongloop\",\n        \"table\": \"inventory\"\n      }\n    }, \"properties\": {\n      \"id\": {\n        \"type\": \"String\",\n        \"required\": false,\n        \"length\": 64,\n        \"precision\": null,\n        \"scale\": null,\n        \"postgresql\": {\n          \"columnName\": \"id\",\n          \"dataType\": \"character varying\",\n          \"dataLength\": 64,\n          \"dataPrecision\": null,\n          \"dataScale\": null,\n          \"nullable\": \"NO\"\n        }\n      },\n      \"productId\": {\n        \"type\": \"String\",\n        \"required\": false,\n        \"length\": 20,\n        \"precision\": null,\n        \"scale\": null,\n        \"id\": 1,\n        \"postgresql\": {\n          \"columnName\": \"product_id\",\n          \"dataType\": \"character varying\",\n          \"dataLength\": 20,\n          \"dataPrecision\": null,\n          \"dataScale\": null,\n          \"nullable\": \"YES\"\n        }\n      },\n      \"locationId\": {\n        \"type\": \"String\",\n        \"required\": false,\n        \"length\": 20,\n        \"precision\": null,\n        \"scale\": null,\n        \"id\": 1,\n        \"postgresql\": {\n          \"columnName\": \"location_id\",\n          \"dataType\": \"character varying\",\n          \"dataLength\": 20,\n          \"dataPrecision\": null,\n          \"dataScale\": null,\n          \"nullable\": \"YES\"\n        }\n      },\n      \"available\": {\n        \"type\": \"Number\",\n        \"required\": false,\n        \"length\": null,\n        \"precision\": 32,\n        \"scale\": 0,\n        \"postgresql\": {\n          \"columnName\": \"available\",\n          \"dataType\": \"integer\",\n          \"dataLength\": null,\n          \"dataPrecision\": 32,\n          \"dataScale\": 0,\n          \"nullable\": \"YES\"\n        }\n      },\n      \"total\": {\n        \"type\": \"Number\",\n        \"required\": false,\n        \"length\": null,\n        \"precision\": 32,\n        \"scale\": 0,\n        \"postgresql\": {\n          \"columnName\": \"total\",\n          \"dataType\": \"integer\",\n          \"dataLength\": null,\n          \"dataPrecision\": 32,\n          \"dataScale\": 0,\n          \"nullable\": \"YES\"\n        }\n      }\n    }}\n\n```\n\n## Type Mapping\n\n - Number\n - Boolean\n - String\n - Object\n - Date\n - Array\n - Buffer\n\n### JSON to PostgreSQL Types\n\n* String|JSON|Text|default: VARCHAR, default length is 1024\n* Number: INTEGER\n* Date: TIMESTAMP WITH TIME ZONE\n* Timestamp: TIMESTAMP WITH TIME ZONE\n* Boolean: BOOLEAN\n\n### PostgreSQL Types to JSON\n\n* BOOLEAN: Boolean\n* VARCHAR|CHARACTER VARYING|CHARACTER|CHAR|TEXT: String\n* BYTEA: Binary;\n* SMALLINT|INTEGER|BIGINT|DECIMAL|NUMERIC|REAL|DOUBLE|SERIAL|BIGSERIAL: Number\n* DATE|TIMESTAMP|TIME: Date\n* POINT: GeoPoint\n\n## Destroying Models\n\nDestroying models may result in errors due to foreign key integrity. Make sure\nto delete any related models first before calling delete on model's with\nrelationships.\n\n## Auto Migrate / Auto Update\n\nAfter making changes to your model properties you must call `Model.automigrate()`\nor `Model.autoupdate()`. Only call `Model.automigrate()` on new models\nas it will drop existing tables.\n\nLoopBack PostgreSQL connector creates the following schema objects for a given\nmodel:\n\n* A table, for example, PRODUCT under the 'public' schema within the database\n\n\n## Running tests\n\nThe tests in this repository are mainly integration tests, meaning you will need\nto run them using our preconfigured test server.\n\n1. Ask a core developer for instructions on how to set up test server\n   credentials on your machine\n2. `npm test`\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/strongloop/loopback-connector-postgresql/issues"
  },
  "_id": "loopback-connector-postgresql@2.3.0",
  "dist": {
    "shasum": "6a72f82c188400636a4ff02810f0bdf913b83299"
  },
  "_from": "loopback-connector-postgresql@",
  "_resolved": "https://registry.npmjs.org/loopback-connector-postgresql/-/loopback-connector-postgresql-2.3.0.tgz"
}
